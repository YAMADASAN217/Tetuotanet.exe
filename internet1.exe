import sys
from PyQt5.QtWidgets import (QApplication, QMainWindow, QTabWidget,
                             QWidget, QVBoxLayout, QHBoxLayout,
                             QLineEdit, QPushButton)
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtCore import QUrl

class BrowserTab(QWidget):
    """ブラウザのタブの中身となるウィジェット"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.layout = QVBoxLayout(self)
        self.layout.setContentsMargins(0, 0, 0, 0) # 余白をなくす

        # WebEngineView (ウェブページを表示する核となる部分)
        self.browser = QWebEngineView()
        self.browser.setUrl(QUrl("https://www.google.com")) # 初期ページ

        # URLバーとボタンのレイアウト
        self.nav_bar = QWidget()
        self.nav_layout = QHBoxLayout(self.nav_bar)
        self.nav_layout.setContentsMargins(5, 5, 5, 5)

        # 戻るボタン
        self.back_button = QPushButton("← 戻る")
        self.back_button.clicked.connect(self.browser.back)

        # 進むボタン
        self.forward_button = QPushButton("→ 進む")
        self.forward_button.clicked.connect(self.browser.forward)

        # URL入力欄
        self.url_bar = QLineEdit()
        self.url_bar.returnPressed.connect(self.navigate_to_url) # Enterキーで移動

        # ナビゲーションバーに部品を追加
        self.nav_layout.addWidget(self.back_button)
        self.nav_layout.addWidget(self.forward_button)
        self.nav_layout.addWidget(self.url_bar)

        # メインレイアウトにナビゲーションバーとブラウザを追加
        self.layout.addWidget(self.nav_bar)
        self.layout.addWidget(self.browser)

        # URLが変更されたときにURLバーも更新する
        self.browser.urlChanged.connect(self.update_urlbar)

    def navigate_to_url(self):
        """URLバーに入力されたアドレスに移動する"""
        q = QUrl(self.url_bar.text())
        if q.scheme() == "":
            # スキーム（http://やhttps://）がない場合は付加
            q.setScheme("http")
        self.browser.setUrl(q)

    def update_urlbar(self, q):
        """ブラウザが新しいURLに移動したときに、URLバーの表示を更新する"""
        self.url_bar.setText(q.toString())
        self.url_bar.setCursorPosition(0) # URLバーのカーソルを一番左に

class MainWindow(QMainWindow):
    """メインウィンドウとタブを管理するクラス"""
    def __init__(self):
        super().__init__()
        self.setWindowTitle("簡単ブラウザ by Gemini") # ウィンドウのタイトル
        self.setGeometry(100, 100, 1200, 800) # ウィンドウの初期サイズと位置

        # タブウィジェットを作成
        self.tabs = QTabWidget()
        self.tabs.setDocumentMode(True) # タブをドキュメント風にする
        self.tabs.setTabsClosable(True) # タブを閉じられるようにする

        # タブの追加ボタン
        self.tabs.tabBarDoubleClicked.connect(self.add_new_tab)
        self.tabs.tabCloseRequested.connect(self.close_current_tab)

        self.setCentralWidget(self.tabs)

        # 最初のタブを追加
        self.add_new_tab(QUrl("https://www.google.com"), "Google")

    def add_new_tab(self, qurl=None, label="新規タブ"):
        """新しいタブを追加する"""
        if qurl is None:
            # タブバーのダブルクリックで呼ばれた場合 (qurlが整数値になる)
            qurl = QUrl("https://www.google.com")
            label = "新規タブ"

        new_tab = BrowserTab()
        new_tab.browser.setUrl(qurl)

        # タブのタイトルをページのタイトルに合わせる
        new_tab.browser.titleChanged.connect(
            lambda title, browser=new_tab.browser: self.tabs.setTabText(
                self.tabs.indexOf(new_tab), title
            )
        )

        i = self.tabs.addTab(new_tab, label)
        self.tabs.setCurrentIndex(i)

    def close_current_tab(self, index):
        """タブを閉じる"""
        if self.tabs.count() < 2:
            # タブが1つのときは閉じない
            return

        self.tabs.removeTab(index)


if __name__ == '__main__':
    # アプリケーションの開始
    app = QApplication(sys.argv)
    QApplication.setApplicationName("MySimpleBrowser")
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
